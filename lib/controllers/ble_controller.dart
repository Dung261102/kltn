import 'package:flutter_blue_plus/flutter_blue_plus.dart'; // Th∆∞ vi·ªán giao ti·∫øp BLE
import 'package:get/get.dart'; // Qu·∫£n l√Ω tr·∫°ng th√°i reactive
import 'package:permission_handler/permission_handler.dart'; // Xin quy·ªÅn truy c·∫≠p

class BleController extends GetxController {
  // Danh s√°ch thi·∫øt b·ªã BLE ƒë√£ qu√©t ƒë∆∞·ª£c (d√πng Rx ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t UI khi thay ƒë·ªïi)
  RxList<ScanResult> scannedDevices = <ScanResult>[].obs;

  // Thi·∫øt b·ªã hi·ªán t·∫°i ƒëang k·∫øt n·ªëi (Rx cho ph√©p theo d√µi thay ƒë·ªïi)
  Rx<BluetoothDevice?> connectedDevice = Rx<BluetoothDevice?>(null);

  // Danh s√°ch d·ªãch v·ª• ƒë√£ kh√°m ph√° ƒë∆∞·ª£c t·ª´ thi·∫øt b·ªã
  RxList<BluetoothService> discoveredServices = <BluetoothService>[].obs;

  // Th√™m RxList ƒë·ªÉ l∆∞u l·ªãch s·ª≠ glucose real-time
  RxList<({DateTime time, int value})> glucoseHistory = <({DateTime time, int value})>[].obs;

  // UUID m·∫´u cho service v√† characteristic glucose
  static const String glucoseServiceUuid = '12345678-1234-5678-1234-56789abcdef0';
  static const String glucoseCharUuid = '12345678-1234-5678-1234-56789abcdef1';

  @override
  void onInit() {
    super.onInit();

    // ƒêƒÉng k√Ω l·∫Øng nghe k·∫øt qu·∫£ qu√©t thi·∫øt b·ªã BLE
    FlutterBluePlus.scanResults.listen((results) {
      scannedDevices.assignAll(results); // C·∫≠p nh·∫≠t danh s√°ch thi·∫øt b·ªã ƒë√£ qu√©t ƒë∆∞·ª£c
      for (var result in results) {
        print("\uD83D\uDCF6 ƒê√£ t√¨m th·∫•y: \${result.device.name} (\${result.device.id.id})");
      }
    });

    // L·∫Øng nghe khi connectedDevice thay ƒë·ªïi ƒë·ªÉ t·ª± ƒë·ªông subscribe
    ever(connectedDevice, (BluetoothDevice? device) async {
      if (device != null) {
        // ƒê·ª£i kh√°m ph√° d·ªãch v·ª• xong r·ªìi subscribe
        await Future.delayed(const Duration(seconds: 2));
        await subscribeGlucoseCharacteristic();
      }
    });
  }

  // H√†m y√™u c·∫ßu c√°c quy·ªÅn c·∫ßn thi·∫øt ƒë·ªÉ d√πng BLE
  Future<void> requestPermissions() async {
    await [
      Permission.location, // M·ªôt s·ªë thi·∫øt b·ªã y√™u c·∫ßu quy·ªÅn ƒë·ªãnh v·ªã khi qu√©t BLE
      Permission.bluetooth,
      Permission.bluetoothScan,
      Permission.bluetoothConnect,
      Permission.bluetoothAdvertise,
    ].request();
  }

  // H√†m b·∫Øt ƒë·∫ßu qu√©t thi·∫øt b·ªã BLE xung quanh
  Future<void> scanDevices() async {
    await requestPermissions(); // ƒê·∫£m b·∫£o quy·ªÅn ƒë∆∞·ª£c c·∫•p

    final adapterState = await FlutterBluePlus.adapterState.first;
    if (adapterState != BluetoothAdapterState.on) {
      print("‚ö†Ô∏è Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t!");
      return;
    }

    scannedDevices.clear(); // Xo√° k·∫øt qu·∫£ c≈© tr∆∞·ªõc khi qu√©t m·ªõi

    print("\uD83D\uDE80 B·∫Øt ƒë·∫ßu qu√©t thi·∫øt b·ªã BLE...");
    await FlutterBluePlus.startScan(timeout: const Duration(seconds: 15));
  }

  // H√†m k·∫øt n·ªëi ƒë·∫øn m·ªôt thi·∫øt b·ªã BLE ƒë√£ ch·ªçn
  Future<void> connectToDevice(BluetoothDevice device) async {
    try {
      await device.connect(timeout: const Duration(seconds: 15));
      connectedDevice.value = device; // G√°n thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi

      // L·∫Øng nghe tr·∫°ng th√°i k·∫øt n·ªëi
      device.state.listen((state) async {
        if (state == BluetoothDeviceState.connecting) {
          print("\uD83D\uDD0C ƒêang k·∫øt n·ªëi v·ªõi: \${device.name}");
        } else if (state == BluetoothDeviceState.connected) {
          print("‚úÖ ƒê√£ k·∫øt n·ªëi: \${device.name}");

          // ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi kh√°m ph√° d·ªãch v·ª•
          await Future.delayed(const Duration(seconds: 1));
          await discoverServices(device);
        } else if (state == BluetoothDeviceState.disconnected) {
          print("‚ùå M·∫•t k·∫øt n·ªëi: \${device.name}");
        }
      });
    } catch (e) {
      print("‚ùó L·ªói khi k·∫øt n·ªëi thi·∫øt b·ªã: \$e");
    }
  }

  // Ng·∫Øt k·∫øt n·ªëi kh·ªèi thi·∫øt b·ªã hi·ªán t·∫°i
  Future<void> disconnectDevice() async {
    final device = connectedDevice.value;
    if (device != null) {
      await device.disconnect();
      connectedDevice.value = null; // Reset tr·∫°ng th√°i
      discoveredServices.clear();
      print("\uD83D\uDD0C Thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi");
    }
  }

  // H√†m kh√°m ph√° c√°c service v√† characteristic c·ªßa thi·∫øt b·ªã BLE
  Future<void> discoverServices(BluetoothDevice device) async {
    try {
      print("\uD83D\uDD0D ƒêang kh√°m ph√° d·ªãch v·ª• t·ª´: \${device.name}");
      List<BluetoothService> services = await device.discoverServices();
      discoveredServices.assignAll(services); // L∆∞u danh s√°ch d·ªãch v·ª• v√†o state
      print("‚úÖ T√¨m th·∫•y \${services.length} d·ªãch v·ª•");

      for (var service in services) {
        print("\uD83E\uDDEA Service: \${service.uuid}");
        for (var characteristic in service.characteristics) {
          print("   \uD83D\uDD39 Characteristic: \${characteristic.uuid} | properties: \${characteristic.properties}");
        }
      }
    } catch (e) {
      print("‚ö†Ô∏è L·ªói khi kh√°m ph√° d·ªãch v·ª•: \$e");
    }
  }

  // H√†m subscribe BLE characteristic ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu glucose real-time
  Future<void> subscribeGlucoseCharacteristic({
    String? serviceUuid,
    String? charUuid,
  }) async {
    final device = connectedDevice.value;
    if (device == null) return;
    final sUuid = serviceUuid ?? glucoseServiceUuid;
    final cUuid = charUuid ?? glucoseCharUuid;
    final services = await device.discoverServices();
    for (var service in services) {
      if (service.uuid.toString().toLowerCase() == sUuid.toLowerCase()) {
        for (var c in service.characteristics) {
          if (c.uuid.toString().toLowerCase() == cUuid.toLowerCase()) {
            await c.setNotifyValue(true);
            c.value.listen((value) {
              if (value.isNotEmpty) {
                // Gi·∫£ s·ª≠ d·ªØ li·ªáu g·ª≠i v·ªÅ l√† 1 byte int (mg/dL)
                final glucose = value[0];
                glucoseHistory.insert(0, (time: DateTime.now(), value: glucose));
                print('üîî Glucose notify: $glucose mg/dL');
              }
            });
          }
        }
      }
    }
  }

  Future<void> doMeasureGlucose() async {
    // N·∫øu thi·∫øt b·ªã IoT c·∫ßn nh·∫≠n l·ªánh ƒëo, g·ª≠i l·ªánh ·ªü ƒë√¢y (v√≠ d·ª• ghi v√†o characteristic control)
    // ·ªû ƒë√¢y gi·∫£ l·∫≠p: ch·ªâ ch·ªù 2s, thi·∫øt b·ªã s·∫Ω notify gi√° tr·ªã m·ªõi
    await Future.delayed(const Duration(seconds: 2));
    // N·∫øu thi·∫øt b·ªã t·ª± ƒë·ªông notify, kh√¥ng c·∫ßn l√†m g√¨ th√™m
    // N·∫øu mu·ªën test, c√≥ th·ªÉ th√™m gi√° tr·ªã gi·∫£ l·∫≠p:
    // glucoseHistory.insert(0, (time:s DateTime.now(), value: 80 + Random().nextInt(40)));
  }
}
