import 'dart:convert';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:get/get.dart';
import 'package:permission_handler/permission_handler.dart';

class BleController extends GetxController {
  RxList<ScanResult> scannedDevices = <ScanResult>[].obs;
  Rx<BluetoothDevice?> connectedDevice = Rx<BluetoothDevice?>(null);
  RxList<BluetoothService> discoveredServices = <BluetoothService>[].obs;
  RxList<({DateTime time, int value})> glucoseHistory = <({DateTime time, int value})>[].obs;

  static const String glucoseServiceUuid = '12345678-1234-5678-1234-56789abcdef0';
  static const String glucoseCharUuid = '12345678-1234-5678-1234-56789abcdef1';

  @override
  void onInit() {
    super.onInit();

    FlutterBluePlus.scanResults.listen((results) {
      scannedDevices.assignAll(results);
      for (var result in results) {
        print("üì° ƒê√£ t√¨m th·∫•y: ${result.device.name} (${result.device.id.id})");
      }
    });

    ever(connectedDevice, (BluetoothDevice? device) async {
      if (device != null) {
        await Future.delayed(const Duration(seconds: 2));
        await subscribeGlucoseCharacteristic();
      }
    });
  }

  Future<void> requestPermissions() async {
    await [
      Permission.location,
      Permission.bluetooth,
      Permission.bluetoothScan,
      Permission.bluetoothConnect,
      Permission.bluetoothAdvertise,
    ].request();
  }

  Future<void> scanDevices() async {
    await requestPermissions();
    final adapterState = await FlutterBluePlus.adapterState.first;
    if (adapterState != BluetoothAdapterState.on) {
      print("‚ö†Ô∏è Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t!");
      return;
    }

    scannedDevices.clear();
    print("üîç B·∫Øt ƒë·∫ßu qu√©t thi·∫øt b·ªã BLE...");
    await FlutterBluePlus.startScan(timeout: const Duration(seconds: 15));
  }

  Future<void> connectToDevice(BluetoothDevice device) async {
    try {
      await device.connect(timeout: const Duration(seconds: 15));
      connectedDevice.value = device;

      device.state.listen((state) async {
        if (state == BluetoothDeviceState.connected) {
          print("‚úÖ ƒê√£ k·∫øt n·ªëi: ${device.name}");
          await Future.delayed(const Duration(seconds: 1));
          await discoverServices(device);
        } else if (state == BluetoothDeviceState.disconnected) {
          print("‚ùå M·∫•t k·∫øt n·ªëi: ${device.name}");
        }
      });
    } catch (e) {
      print("‚ùó L·ªói khi k·∫øt n·ªëi thi·∫øt b·ªã: $e");
    }
  }

  Future<void> disconnectDevice() async {
    final device = connectedDevice.value;
    if (device != null) {
      await device.disconnect();
      connectedDevice.value = null;
      discoveredServices.clear();
      print("üîå Thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi");
    }
  }

  Future<void> discoverServices(BluetoothDevice device) async {
    try {
      print("üîç ƒêang kh√°m ph√° d·ªãch v·ª• t·ª´: ${device.name}");
      List<BluetoothService> services = await device.discoverServices();
      discoveredServices.assignAll(services);
      print("‚úÖ T√¨m th·∫•y ${services.length} d·ªãch v·ª•");

      for (var service in services) {
        print("üß¨ Service: ${service.uuid}");
        for (var characteristic in service.characteristics) {
          print("   üîπ Characteristic: ${characteristic.uuid} | properties: ${characteristic.properties}");
        }
      }
    } catch (e) {
      print("‚ö†Ô∏è L·ªói khi kh√°m ph√° d·ªãch v·ª•: $e");
    }
  }

  Future<void> subscribeGlucoseCharacteristic({
    String? serviceUuid,
    String? charUuid,
  }) async {
    final device = connectedDevice.value;
    if (device == null) {
      print("‚ö†Ô∏è Kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒëang k·∫øt n·ªëi");
      return;
    }

    final sUuid = serviceUuid ?? glucoseServiceUuid;
    final cUuid = charUuid ?? glucoseCharUuid;

    try {
      final services = await device.discoverServices();

      for (var service in services) {
        if (service.uuid.toString().toLowerCase() == sUuid.toLowerCase()) {
          for (var characteristic in service.characteristics) {
            if (characteristic.uuid.toString().toLowerCase() == cUuid.toLowerCase()) {
              // B·∫≠t notify
              await characteristic.setNotifyValue(true);
              // ‚è±Ô∏è Delay 1 gi√¢y sau khi b·∫≠t notify
              await Future.delayed(const Duration(seconds: 1));
              // await Future.delayed(const Duration(milliseconds: 200));

              print("üì° ƒê√£ subscribe characteristic: ${characteristic.uuid}");
              print("üü¢ ƒêang l·∫Øng nghe d·ªØ li·ªáu t·ª´ BLE...");

              // L·∫Øng nghe d·ªØ li·ªáu real-time t·ª´ thi·∫øt b·ªã
              characteristic.lastValueStream.listen((value) {
                print("üì¶ Nh·∫≠n d·ªØ li·ªáu BLE: $value");

                if (value.isEmpty) {
                  print("‚ö†Ô∏è D·ªØ li·ªáu BLE r·ªóng, b·ªè qua");
                  return;
                }

                try {
                  final jsonString = utf8.decode(value);
                  print("üì• Chu·ªói JSON nh·∫≠n ƒë∆∞·ª£c: $jsonString");

                  if (!jsonString.trim().startsWith('{') || !jsonString.trim().endsWith('}')) {
                    print("‚ö†Ô∏è Kh√¥ng ph·∫£i JSON h·ª£p l·ªá: $jsonString");
                    return;
                  }

                  final Map<String, dynamic> decoded = jsonDecode(jsonString);
                  final glucose = decoded['glucose'];

                  if (glucose is int) {
                    glucoseHistory.insert(0, (time: DateTime.now(), value: glucose));
                    print("üîî Glucose m·ªõi: $glucose mg/dL");
                  } else {
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ho·∫∑c sai ki·ªÉu d·ªØ li·ªáu glucose trong JSON");
                  }
                } catch (e) {
                  print("‚ùå L·ªói khi ph√¢n t√≠ch JSON t·ª´ BLE: $e");
                }
              });

              return; // Ng·ª´ng sau khi ƒë√£ subscribe
            }
          }
        }
      }

      print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y characteristic c√≥ UUID ph√π h·ª£p");
    } catch (e) {
      print("‚ùó L·ªói trong qu√° tr√¨nh subscribe BLE: $e");
    }
  }


  Future<void> doMeasureGlucose() async {
    await Future.delayed(const Duration(seconds: 2));
  }
}
