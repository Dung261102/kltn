import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:get/get.dart';
import 'package:permission_handler/permission_handler.dart';

class BleController extends GetxController {
  // Danh s√°ch thi·∫øt b·ªã BLE ƒë√£ qu√©t ƒë∆∞·ª£c
  RxList<ScanResult> scannedDevices = <ScanResult>[].obs;

  // Thi·∫øt b·ªã hi·ªán t·∫°i ƒëang k·∫øt n·ªëi
  Rx<BluetoothDevice?> connectedDevice = Rx<BluetoothDevice?>(null);

  // Danh s√°ch d·ªãch v·ª• ƒë√£ kh√°m ph√° ƒë∆∞·ª£c t·ª´ thi·∫øt b·ªã
  RxList<BluetoothService> discoveredServices = <BluetoothService>[].obs;

  @override
  void onInit() {
    super.onInit();

    // L·∫Øng nghe k·∫øt qu·∫£ qu√©t v√† c·∫≠p nh·∫≠t danh s√°ch thi·∫øt b·ªã
    FlutterBluePlus.scanResults.listen((results) {
      scannedDevices.assignAll(results);
      for (var result in results) {
        print("üì∂ ƒê√£ t√¨m th·∫•y: ${result.device.name} (${result.device.id.id})");
      }
    });
  }

  // Xin quy·ªÅn BLE c·∫ßn thi·∫øt
  Future<void> requestPermissions() async {
    await [
      Permission.location,
      Permission.bluetooth,
      Permission.bluetoothScan,
      Permission.bluetoothConnect,
      Permission.bluetoothAdvertise,
    ].request();
  }

  // Qu√©t c√°c thi·∫øt b·ªã BLE xung quanh
  Future<void> scanDevices() async {
    await requestPermissions();

    final adapterState = await FlutterBluePlus.adapterState.first;
    if (adapterState != BluetoothAdapterState.on) {
      print("‚ö†Ô∏è Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t!");
      return;
    }

    scannedDevices.clear();

    print("üöÄ B·∫Øt ƒë·∫ßu qu√©t thi·∫øt b·ªã BLE...");
    await FlutterBluePlus.startScan(timeout: const Duration(seconds: 15));
  }

  // K·∫øt n·ªëi t·ªõi thi·∫øt b·ªã BLE
  Future<void> connectToDevice(BluetoothDevice device) async {
    try {
      await device.connect(timeout: const Duration(seconds: 15));
      connectedDevice.value = device;

      // Theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
      device.state.listen((state) async {
        if (state == BluetoothDeviceState.connecting) {
          print("üîå ƒêang k·∫øt n·ªëi v·ªõi: ${device.name}");
        } else if (state == BluetoothDeviceState.connected) {
          print("‚úÖ ƒê√£ k·∫øt n·ªëi: ${device.name}");

          // ƒê·ª£i 1s tr∆∞·ªõc khi kh√°m ph√° d·ªãch v·ª• (fix m·ªôt s·ªë thi·∫øt b·ªã BLE c·∫ßn delay)
          await Future.delayed(const Duration(seconds: 1));
          await discoverServices(device);
        } else if (state == BluetoothDeviceState.disconnected) {
          print("‚ùå M·∫•t k·∫øt n·ªëi: ${device.name}");
        }
      });
    } catch (e) {
      print("‚ùó L·ªói khi k·∫øt n·ªëi thi·∫øt b·ªã: $e");
    }
  }

  // Ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã hi·ªán t·∫°i
  Future<void> disconnectDevice() async {
    final device = connectedDevice.value;
    if (device != null) {
      await device.disconnect();
      connectedDevice.value = null;
      discoveredServices.clear();
      print("üîå Thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi");
    }
  }

  // Kh√°m ph√° c√°c service & characteristic c·ªßa thi·∫øt b·ªã
  Future<void> discoverServices(BluetoothDevice device) async {
    try {
      print("üîç ƒêang kh√°m ph√° d·ªãch v·ª• t·ª´: ${device.name}");
      List<BluetoothService> services = await device.discoverServices();
      discoveredServices.assignAll(services);
      print("‚úÖ T√¨m th·∫•y ${services.length} d·ªãch v·ª•");

      for (var service in services) {
        print("üß™ Service: ${service.uuid}");
        for (var characteristic in service.characteristics) {
          print("   üîπ Characteristic: ${characteristic.uuid} | properties: ${characteristic.properties}");
        }
      }
    } catch (e) {
      print("‚ö†Ô∏è L·ªói khi kh√°m ph√° d·ªãch v·ª•: $e");
    }
  }
}
